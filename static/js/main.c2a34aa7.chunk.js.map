{"version":3,"sources":["api/index.js","components/404.js","context/PrismicContext.js","pages/LandingPage.js","pages/DynamicLandingPage.js","components/Router.js","components/DropDown.js","components/Languages.js","components/PrismicRefs.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["ref","lastFetch","_404","_ref","match","react_default","a","createElement","url","href","apiEndpoint","prism","prismic","api","cache","Map","defaultLocale","getByID","_callee","id","prismApi","doc","regenerator_default","wrap","_context","prev","next","sent","abrupt","console","log","concat","undefined","stop","this","getByUID","name","type","arguments","length","locale","Array","prototype","slice","call","queryPrismic","cacheId","query","Predicates","at","options","lang","getBySlug","slug","_callee2","_ref$options","_ref2","results","_context2","has","Promise","resolve","get","Object","objectSpread","primsicRefs","refs","resolvePageContent","set","_callee4","contentPromises","resolvedContent","_args4","_context4","data","isArray","content","map","_ref3","asyncToGenerator","mark","_callee3","linkedContent","_context3","content_link","prismicType","_x3","apply","all","filter","Boolean","setRef","nextRef","reFetch","_lastFetch","_lastFetch2","slicedToArray","fn","args","getApiInfo","fetch","then","resp","json","getPageByUID","getPageBySlug","PrismicContext","React","createContext","pathToUID","/","/contact/","/about/","toUID","path","Error","PrismicProvider","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","_key","possibleConstructorReturn","getPrototypeOf","state","languages","document","isLoading","status","currentRef","setPrismicRef","setState","fetchPageByUID","uid","handleResponse","setLocale","fetchPageForPath","fetchPageBySlug","pageUID","toConsumableArray","alternate_languages","inherits","createClass","key","value","_this2","apiInfo","find","isMasterRef","window","__getState","Provider","props","children","Component","LandingPage","_useContext","useContext","useEffect","meta_title","meta_description","className","Fragment","image","src","alt","style","maxWidth","Link","to","pages_DynamicLandingPage","params","_ref2$content","rest","objectWithoutProperties","metaInfo","entries","includes","section","title","_ref5","text","_ref6","_ref7","_ref8","term","definition","i18n","sv-se","en-us","routes","comp","Nav","NavLink","exact","activeClassName","Routes","Switch","Route","component","DynamicLandingPage","NotFound","DropDown","onSelect","list","selected","_useState","useState","_useState2","open","setOpen","disabled","onClick","label","flags","no","Languages","_ref$className","otherLanguages","loc","src_components_DropDown","PrismicRefs","otherRefs","_ref4","components_Header","Router_Nav","components_PrismicRefs","components_Languages","App","Router_Routes","location","hostname","basename","URL","process","pathname","ReactDOM","render","PrismicContext_PrismicProvider","BrowserRouter","src_components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2a34aa7.chunk.js","sourcesContent":["import prismic from 'prismic-javascript';\n\nconst apiEndpoint = 'https://hontas-test.prismic.io/api/v2';\nconst prism = prismic.api(apiEndpoint);\nlet ref;\nlet lastFetch;\n\nconst cache = new Map();\nconst defaultLocale = 'sv-se';\n\nasync function getByID(id) {\n  const prismApi = await prism;\n  const doc = await prismApi.getByID(id, { ref });\n  if (doc) return doc;\n  console.log(`Could not get document using id: ${id} and ref: ${ref}`);\n  return undefined;\n}\n\nfunction getByUID(name, type = 'page', locale = defaultLocale) {\n  lastFetch = [getByUID, [...arguments]];\n  return queryPrismic({\n    cacheId: ref\n      ? `${ref}/${locale}/${type}-${name}`\n      : `${locale}/${type}-${name}`,\n    query: prismic.Predicates.at(`my.${type}.uid`, name),\n    options: { lang: locale, ref }\n  });\n}\n\nfunction getBySlug(slug, locale) {\n  lastFetch = [getBySlug, [...arguments]];\n  return queryPrismic({\n    cacheId: ref ? `${ref}/${slug}` : slug,\n    query: prismic.Predicates.at(`my.page.slug`, slug),\n    options: {\n      lang: locale || '*',\n      ref\n    }\n  });\n}\n\nasync function queryPrismic({ cacheId, query, options = {} }) {\n  if (cache.has(cacheId)) return Promise.resolve(cache.get(cacheId));\n  const prismApi = await prism;\n  const { results } = await prismApi.query(query, options);\n  const doc = results[0]\n    ? {\n        ...results[0],\n        primsicRefs: prismApi.refs\n      }\n    : undefined;\n  await resolvePageContent(doc);\n  console.log(cacheId, doc);\n  cache.set(cacheId, doc);\n  return doc;\n}\n\nasync function resolvePageContent(doc = {}) {\n  if (doc.data && Array.isArray(doc.data.content)) {\n    const contentPromises = doc.data.content.map(async (content) => {\n      if (!content.content_link) return content;\n      const linkedContent = await getByID(content.content_link.id);\n      if (!linkedContent) return null;\n      return {\n        ...linkedContent.data,\n        prismicType: linkedContent.type,\n        id: linkedContent.id\n      };\n    });\n\n    const resolvedContent = await Promise.all(contentPromises);\n    doc.data.content = resolvedContent.filter(Boolean); // filter out unresolved\n  }\n  return doc;\n}\n\nexport default {\n  setRef: (nextRef) => {\n    ref = nextRef;\n  },\n  reFetch: () => {\n    const [fn, args] = lastFetch;\n    return fn.apply(null, args);\n  },\n  getApiInfo: () => fetch(apiEndpoint).then((resp) => resp.json()),\n  getPageByUID: (name, locale) => getByUID(name, 'page', locale),\n  getPageBySlug: (slug, locale) => getBySlug(slug, locale)\n};\n","import React from 'react';\n\nexport default ({ match }) => (\n  <div>\n    <h1>404 - Not Found</h1>\n    <p>\n      <small>\n        <code>{match.url}</code>\n      </small>\n    </p>\n    <a href=\"/\">Go to start page</a>\n  </div>\n);\n","import React from 'react';\nimport api from '../api';\n\nconst PrismicContext = React.createContext({});\nconst pathToUID = {\n  '/': 'home',\n  '/contact/': 'contact',\n  '/about/': 'about'\n};\nconst toUID = (path) => {\n  if (typeof pathToUID[path] === 'undefined')\n    throw Error(`Unhandled path '${path}'`);\n  return pathToUID[path];\n};\n\nexport class PrismicProvider extends React.Component {\n  state = {\n    languages: [],\n    locale: 'sv-se',\n    document: {},\n    isLoading: false,\n    status: 200,\n    refs: [],\n    currentRef: undefined\n  };\n\n  componentDidMount() {\n    api.getApiInfo().then((apiInfo) => {\n      console.log('apiInfo', apiInfo);\n      this.setState({\n        refs: apiInfo.refs,\n        currentRef: apiInfo.refs.find(({ isMasterRef }) => isMasterRef).ref\n      });\n    });\n    window.__getState = () => this.state;\n  }\n\n  setPrismicRef = (ref) => {\n    this.setState({ currentRef: ref });\n    api.setRef(ref);\n    if ((this.state.document, this.state.document.id)) {\n      this.fetchPageByUID(this.state.document.uid, this.state.locale);\n    } else {\n      api.reFetch().then(this.handleResponse);\n    }\n  };\n\n  setLocale = (locale) => {\n    this.setState({ locale });\n    this.fetchPageByUID(this.state.document.uid, locale, this.state.currentRef);\n  };\n\n  fetchPageForPath = (path) =>\n    this.fetchPageByUID(toUID(path), this.state.locale, this.state.currentRef);\n\n  fetchPageBySlug = (slug, locale, ref = this.state.currentRef) => {\n    this.setState({ isLoading: true });\n    return api.getPageBySlug(slug, locale, ref).then(this.handleResponse);\n  };\n\n  fetchPageByUID = (\n    pageUID,\n    locale = this.state.locale,\n    ref = this.state.currentRef\n  ) => {\n    this.setState({ isLoading: true });\n    return api.getPageByUID(pageUID, locale, ref).then(this.handleResponse);\n  };\n\n  handleResponse = (doc) => {\n    if (!doc) {\n      this.setState({\n        isLoading: false,\n        document: {},\n        status: 404\n      });\n    } else {\n      this.setState({\n        isLoading: false,\n        languages: [\n          doc.lang,\n          ...doc.alternate_languages.map(({ lang }) => lang)\n        ],\n        locale: doc.lang,\n        document: {\n          ...doc.data,\n          uid: doc.uid\n        },\n        status: 200\n      });\n    }\n  };\n\n  render() {\n    return (\n      <PrismicContext.Provider\n        value={{\n          ...this.state,\n          fetchPageForPath: this.fetchPageForPath,\n          fetchPageBySlug: this.fetchPageBySlug,\n          setPrismicRef: this.setPrismicRef,\n          setLocale: this.setLocale\n        }}\n      >\n        {this.props.children}\n      </PrismicContext.Provider>\n    );\n  }\n}\n\nexport default PrismicContext;\n","import React, { useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PrismicContext from '../context/PrismicContext';\n\nexport default ({ match }) => {\n  const { document, locale, fetchPageForPath, isLoading } = useContext(\n    PrismicContext\n  );\n\n  useEffect(() => {\n    fetchPageForPath(match.path);\n  }, []);\n\n  if (isLoading)\n    return (\n      <p>{locale === 'sv-se' ? 'Laddar innehåll...' : 'Loading content...'}</p>\n    );\n\n  const { meta_title, meta_description, slug } = document || {};\n\n  return (\n    <main className=\"App-content\">\n      <>\n        <h1>{meta_title}</h1>\n        <p>{`${locale}/${slug}`}</p>\n        <p>{meta_description}</p>\n        {document.image && (\n          <img\n            src={document.image.url}\n            alt={document.image.alt}\n            style={{ maxWidth: '35vw' }}\n          />\n        )}\n        <h3>Dynamiska sidor</h3>\n        Publicerad (master):\n        <Link to=\"/kampanj/loans-with-market-leading-interest\">\n          kampanj/loans-with-market-leading-interest\n        </Link>\n        <br />\n        Ej publicerad (draft):\n        <Link to=\"/kampanj/lan-med-marknadsledande-ranta\">\n          kampanj/lan-med-marknadsledande-ranta\n        </Link>\n        <p>\n          Det opublicerade ligger i en release - tyvärr. Hade varit bättre att\n          ha tillgång till allt opublicerat data utan att behöva sätta upp\n          previews hos prismic\n        </p>\n      </>\n    </main>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n\nimport NotFound from '../components/404';\nimport PrismicContext from '../context/PrismicContext';\nimport './DynamicLandingPage.css';\n\nexport default ({ match }) => {\n  const { document, locale, fetchPageBySlug, isLoading, status } = useContext(\n    PrismicContext\n  );\n\n  useEffect(() => {\n    fetchPageBySlug(match.params.slug);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <p>{locale === 'sv-se' ? 'Laddar innehåll...' : 'Loading content...'}</p>\n    );\n  }\n\n  if (status === 404) return <NotFound match={match} />;\n\n  const { slug, content = [], ...rest } = document || {};\n  const metaInfo = Object.entries(rest).filter(([key]) => key.includes('meta'));\n\n  return (\n    <div className=\"DynamicLandingPage\">\n      {content.map((section) => (\n        <section key={section.id}>\n          <h2>{section.title.map(({ text }) => text)}</h2>\n          <p>{section.text.map(({ text }) => text)}</p>\n          <img\n            src={section.image.url}\n            alt={section.image.alt}\n            className=\"DynamicLandingPage__image\"\n          />\n        </section>\n      ))}\n      <div className=\"DynamicLandingPage__meta\">\n        <dl>\n          {metaInfo.map(([term, definition]) => (\n            <div key={term}>\n              <dt>{term}</dt>\n              <dd>{definition}</dd>\n            </div>\n          ))}\n        </dl>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Switch, Route, NavLink } from 'react-router-dom';\n\nimport NotFound from './404';\nimport PrismicContext from '../context/PrismicContext';\nimport LandingPage from '../pages/LandingPage';\nimport DynamicLandingPage from '../pages/DynamicLandingPage';\n\nimport './Router.css';\n\nconst i18n = {\n  'sv-se': {\n    '/': 'Hem',\n    '/about/': 'Om',\n    '/contact/': 'Kontakt'\n  },\n  'en-us': {\n    '/': 'Home',\n    '/about/': 'About',\n    '/contact/': 'Contact'\n  }\n};\n\nexport const routes = [\n  {\n    path: '/',\n    comp: LandingPage\n  },\n  {\n    path: '/about/',\n    comp: LandingPage\n  },\n  {\n    path: '/contact/',\n    comp: LandingPage\n  }\n];\n\nexport const Nav = () => {\n  const { locale } = useContext(PrismicContext);\n  return (\n    <nav>\n      <ul className=\"Router__navList\">\n        {routes.map(({ path, text }) => (\n          <li key={path}>\n            <NavLink\n              to={path}\n              exact\n              className=\"Router__navList__link\"\n              activeClassName=\"Router__navList__link--active\"\n            >\n              {i18n[locale][path]}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport const Routes = () => (\n  <Switch>\n    {routes.map(({ path, comp, exact }) => (\n      <Route path={path} exact component={comp} key={path} />\n    ))}\n    <Route path=\"/kampanj/:slug\" component={DynamicLandingPage} />\n    <Route component={NotFound} />\n  </Switch>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DropDown.css';\n\nconst DropDown = ({ onSelect, list, selected }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"DropDown\">\n      <button\n        className=\"DropDown__toggle-btn\"\n        disabled={list.length < 1}\n        onClick={() => setOpen(!open)}\n      >\n        {selected || ' '}\n      </button>\n      <div\n        className={`DropDown__dropdown ${\n          open ? 'DropDown__dropdown--is-open' : ''\n        }`}\n      >\n        {list.map(({ id, label }) => (\n          <button\n            key={id}\n            className=\"DropDown__dropdown-btn\"\n            onClick={() => {\n              onSelect(id);\n              setOpen(false);\n            }}\n          >\n            {label}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nDropDown.propTypes = {\n  label: PropTypes.string,\n  onSelect: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  selected: PropTypes.string\n};\n\nexport default DropDown;\n","import React, { useContext } from 'react';\nimport PrismicContext from '../context/PrismicContext';\nimport DropDown from './DropDown';\n\nconst flags = {\n  'en-us': '🇺🇸',\n  'sv-se': '🇸🇪',\n  no: '🇳🇴'\n};\n\nfunction Languages({ className = '' }) {\n  const { languages, locale, setLocale } = useContext(PrismicContext);\n  const otherLanguages = languages\n    .filter((lang) => lang !== locale)\n    .map((loc) => ({ id: loc, label: flags[loc] }));\n\n  return (\n    <div className={`Languages ${className}`}>\n      <DropDown\n        list={otherLanguages}\n        selected={flags[locale]}\n        onSelect={setLocale}\n      />\n    </div>\n  );\n}\n\nexport default Languages;\n","import React, { useContext } from 'react';\nimport PrismicContext from '../context/PrismicContext';\nimport DropDown from './DropDown';\n\nfunction PrismicRefs({ className = '' }) {\n  const { refs, currentRef, setPrismicRef } = useContext(PrismicContext);\n  const selected = refs.find(({ ref }) => ref === currentRef) || {};\n  const otherRefs = refs\n    .filter(({ ref }) => ref !== currentRef)\n    .map(({ ref, label }) => ({ id: ref, label }));\n\n  return (\n    <div className={`PrismicRefs ${className}`}>\n      Prismic ref:{' '}\n      <DropDown\n        list={otherRefs}\n        selected={selected.label}\n        onSelect={setPrismicRef}\n      />\n    </div>\n  );\n}\n\nexport default PrismicRefs;\n","import React from 'react';\n\nimport * as Router from './Router';\nimport Languages from './Languages';\nimport PrismicRefs from './PrismicRefs';\n\nimport './Header.css';\n\nexport default () => (\n  <header className=\"Header\">\n    <Router.Nav />\n    <PrismicRefs className=\"Header__refs\" />\n    <Languages className=\"Header__lang\" />\n  </header>\n);\n","import React from 'react';\nimport * as Router from './Router';\nimport Header from './Header';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"App-content\">\n        <Router.Routes />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/App';\nimport { PrismicProvider } from './context/PrismicContext';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\n// make build work locally and on github pages\nlet basename = '';\nif (process.env.PUBLIC_URL) {\n  basename = new URL(process.env.PUBLIC_URL).pathname;\n}\n\nReactDOM.render(\n  <PrismicProvider>\n    <Router basename={basename}>\n      <App />\n    </Router>\n  </PrismicProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}